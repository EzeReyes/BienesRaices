MÉTODOS HTTP
GET - Utilizado para mostrar información.(Ejemplo: cuando un usuario visita el sitio, y debo mostrarle información)
POST - Utilizado para Enviar información.(Ejemplo: cuando un usuario completa información de un formulario y debo procesarlo)
PUT/PATCH - Utilizado para Actualizar información.
DELETE - Utilizado para Eliminar información.


Express soporta Routing y los diferentes métodos HTTP y puedo utilizarlos para Web o móvil.



// const express = require('express') //CommonJS
// el require, busca la dependencia en el archivo de node js, la extrae  y asigna para utilizarla


// Crear la app, contiene toda la información del proyecto, es la instancia de express ----- const app = express()



// Definir un puerto y arrancar el proyecto ----- const port = 3000;



----------
¿Qué es un Template Engine?

O Motor de Plantilla, son tecnologías que nos permiten crear el código HTML y mostrar información contenida en variables de una forma más compacta y clara.

Pug, Handlebars, EJS son las opciones más populares para Node.js.

También es posible utilizar React, Angular, Svelte o Vue como tu Template Engine, pero necesitarás crear una API con respuesta JSON.


----------

MVC Model View Controller

Es un patrón de arquitectura de software que permite la separación de obligaciones de cada pieza de tu código.

Enfatiza la separación de la lógica de programación con la presentación.

Ventajas: no mejora el performance del código, tampoco da seguridad, pero tu código tendrá un mejor orden y será fácil de mantener.

En un grupo de trabajo, el tener código ordenado permite que más de una persona pueda entender que es lo que hace cada parte de él.

Aprender MVC, hará que otras tecnologías como Laravel, Nest, Rails, Django, Net Core, Spring Boot te sean más sencillas de aprender.


El modelo en MVC, sera el encargado de todas las interacciones en la base de datos, obtener datos, actualizarlos y eliminar.
El modelo se encarga de consultar una base de datos, obtiene la información pero no la muestra, eso es trabajo de la vista.
El modelo tampoco se encarga de actualizar la información directamente, es el Controlador quien decide cuándo llamarlo.

La vista en MVC se encarga de todo lo que se ve en pantalla (HTML)
Node soporta múltiples Template Engine como son EJS, Pug, Handlebars. Si utilizas React, Vue, Angular, Svelte, estos serían tu vista.
El Modelo consulta la base de datos, pero es por medio del Controlador que se decide que Vista hay que llamar y que datos presentar.


Controlador en MVC
Es el que comunica modelo y vista antes de que el Modelo consulte la base de datos, el Controlador es el encargado de llamar un modelo en especifico.

Router en MVC
Es el encargado de registrar todas las URL's o Endpoints que va a soportar nuestra aplicación.
Ejemplo: Si el Usuario accede a /clientes el router ya tiene registrada esa ruta y un controlador con una función que sabe que Modelo debe llamar y que vista mostrar cuando el usuario visita esa URL.

--------------

¿Qué es un ORM?
ORM son las iniciales de Object Relational Mapping
Es una técnica que se utiliza donde los datos de una base de datos son tratados como Objetos, utilizando un paradigma de Programación Orientada a Objetos.

Node.js tiene una gran cantidad de ORM's que se instalan como librería.

En MVC, un ORM se relaciona bastante con el Modelo

Ventajas de un ORM
Comenzar a crear aplicaciones que utilicen bases de datos, sin necesidad de escribir código SQL y tampoco saber sobre modelado de base de datos.
Velocidad en desarrollo ya que tienen una gran cantidad de métodos para crear, listar, actualizar o eliminar datos.
La mayoría cuentan con todas las medidas de seguridad.

Ejemplo de SQL:
INSERT INTO`categorias` (`nombre`) VALUES ('Casa');

Ejemplo con ORM:
Categoria.create({nombre:'Casa'})

¿Qué son las Asociaciones?
Las Asociaciones son formas de cruzar información en tu base de datos, Sequelize soporta todos los tipos de relaciones en una base de datos : 1:1, 1:N, N:N.
La forma en que lo hace es por medio de métodos que ya existen en Sequelize.

Métodos 

hasOne 
es para crear Relaciones 1:1, donde un registro puede tener hasta 1 registro relacionado en otra tabla.
Ejemplo: Una Propiedad tiene un Vendedor, un Usuario tiene un Perfil, un Producto tiene una Categoria. 
Sintaxis: Vendedor.hasOne(Propiedad), en este ejemplo: Propiedad deberá tener una llave foránea que haga referencia a un Vendedor, si no se especifica, Sequelize lo va a crear

belongsTo
Al igual que hasOne es para relaciones 1:1, donde un registro puede tener hasta 1 registro relacionado en otra tabla, la única diferencia es sinatis.
Sintaxis: Propiedad.belongsTo(Vendedor)
En este ejemplo, Propiedad deberá tener una llave foránea que haga referencia a un Vendedor, si no se especifica, Sequelize lo va a crear

hasMany
Es para crear Relaciones 1:N, donde un registro puede tener múltiples coincidencias o relaciones en otra tabla.
Ejemplo: Un Vendedor tiene múltiples Posts, un Producto tiene múltiples Rewiews.

Sintaxis: Vendedor.hasMany(Propiedad)

